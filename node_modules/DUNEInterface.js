"use strict";
var fs = require('fs');//filesystem
var request = require('request');
var xmlParser=require('xml2js');
var DUNEInterface=function(authenticationParameters) {//includes ip
    this.duneIp=authenticationParameters.Dune.IP;
    this.getItemAttributes;
    this.itemUrls={};//will hold urls;
    if(!authenticationParameters.Audio.IP){
        authenticationParameters.Audio=authenticationParameters.Video;//includes IP, USER, and PASSWORD
    }
    this.folderParameters=authenticationParameters;
    this.embyTime=10000000;
    this.isStop=true;
    this.position=0;
    this.currentlyPlayingUrl="";
    this.isFile=false;
    this.paused=false;
}
DUNEInterface.prototype.testConnection=function(){
    var options={url:"http://"+this.duneIp+"/cgi-bin/do?cmd=status",  method:'get'};
    request(options, function(err, res, body){
        if(!err){
            return "success!";
        }
        else {
            return err;
        }
    });        
}

DUNEInterface.prototype.playMedia=function(itemInfo, getItemAttributes, sendUpdate){//itemInfo is an object that incluees array of itemIds, startpositionticks, etc. 
    var self=this;
    self.getItemAttributes=getItemAttributes;//getItemAttributes is a function that retrieves detailed information per itemId
    self.itemUrls={};
    self.sendUpdate=sendUpdate;
    if(self.isStop){
        self.stop();
    }
    getItemAttributes(itemInfo.ItemIds[0], itemInfo.ControllingUserId, function(err, res, body){self.getMediaType(err, res, body, itemInfo);});
}
DUNEInterface.prototype.getMediaType=function(err, res, body, itemInfo){
    //console.log(itemInfo);
    var path=body.Items[0].Path;
    var type=body.Items[0].MediaType;
    path=this.getDUNEUrl(type, path);
    this.isFile=false;
    //console.log("at line 47: "+type);
    switch(type){
        case "Audio":
            path=path.substring(0, path.lastIndexOf("\\"))+"/playlist.m3u";
            createPlaylist(path, itemInfo.ItemIds, itemInfo.ControllingUserId);
            break;
        case "Video":
            this.itemUrls[path]=itemInfo.ItemIds[0];
            //console.log("at line 54: "+path+", "+itemInfo.ItemIds[0]);
            if(body.Items[0].VideoType==="VideoFile"){
                this.isFile=true;
            }
            this.playDune(itemInfo.StartPositionTicks, body.Items[0].VideoType, path); 
            break;
    }

}
function helperUrl(path){
    path=path.replace("\\\\", "");
    path=path.substring(path.indexOf("\\"));
    path=path.replace(/\\/g, "/");
    //console.log(path);
    return path;
}
DUNEInterface.prototype.getDUNEUrl=function(type, url){
    var folder=this.folderParameters[type];
    var host=folder.USERNAME+":"+folder.PASSWORD+"@"+folder.IP;
    return "smb://"+host+helperUrl(url);
}

function createPlaylist(path, items, userId){
    fs.writeFile(path, '#EXTM3U', function(err){
        var n=items.length;
        var fileObjects={path:path, items:items, n:n, userId:userId};
        createFile(fileObjects, 0, ""); //this is wrapper for getDetailedItemInfo so that I can syncrounously hit the file
    });
}
DUNEInterface.prototype.createFile=function(fileObjects, i,  itemsToWrite) { //wrapper for asynced to make it "synced"...callback itself on completion
    var self=this;
    self.getItemAttributes(fileObjects.items[i], fileObjects.userId, function(err, res, body){
        self.itemUrls[fileObjects.path]=items[i];//key with path to item id
        itemsToWrite=itemsToWrite+"\n"+body.Items[0].Path;
        if(i===(fileObjects.n-1)){
            fs.appendFile(fileObjects.path, itemsToWrite, function(err) {
                self.playDune(0, "Music", fileObjects.path);
            });
        }
        else {
            i++;
            createFile(fileObjects, i, itemsToWrite);
        }
    });
}
DUNEInterface.prototype.playDune=function(startposition, type, url){
   // console.log(type);
    //.substring(0, startposition.length-7);
    if(!startposition){
        startposition=0;
    }
    var fullUrl="";
    var path=url;
    var self=this;
    switch(type){
        case "BluRay":
            fullUrl="http://"+self.duneIp+"/cgi-bin/do?cmd=start_bluray_playback&media_url=";
            break;
        case "Dvd":
            fullUrl="http://"+self.duneIp+"/cgi-bin/do?cmd=start_dvd_playback&media_url=";
            break;
        case "Music":
            fullUrl="http://"+self.duneIp+"/cgi-bin/do?cmd=start_playlist_playback&media_url=";
            break;
        default:
            fullUrl="http://"+self.duneIp+"/cgi-bin/do?cmd=start_file_playback&media_url=";
            url=url+"&position="+startposition/self.embyTime;//startPositionTicks.toString();
    }
    fullUrl=fullUrl+url;
    fullUrl=fullUrl.replace(/ /g, "%20");  
    console.log("Sent this url to dune: "+fullUrl);
    request({
        url:fullUrl, 
        method:'get',
        json:true}, function(){
            self.isStop=false;
            self.sendUpdate(startposition, "", self.itemUrls[path]);
            self.constantPolling(500, self.postPollingResults, self);
        
        });
}
DUNEInterface.prototype.constantPolling=function(time, callback, passedSelf){ //not a "real" callback...just something to execute on every time
    var self=this;
    var options={url:"http://"+self.duneIp+"/cgi-bin/do?cmd=status",  method:'get'};
    request(options, function(err, res, body){
        xmlParser.parseString(body, function(error, result){
            
            if(!self.isStop) {
                callback(result, passedSelf);
                setTimeout(function(){
                    return self.constantPolling(time, callback, passedSelf); //I wonder if this will be really bad for ram over time...
                }, time);
            }
        });
    });
}
DUNEInterface.prototype.stop=function(){
    this.isStop=true;
    this.sendUpdate(this.position*this.embyTime, "Stopped", this.itemUrls[this.currentlyPlayingUrl]);
    var url="http://"+this.duneIp+"/cgi-bin/do?cmd=ir_code&ir_code=E619BF00";
    request({
        url:url, 
        method:'get',
        json:true}, function(){        
        });
}
DUNEInterface.prototype.next=function(){
    var url="";
    if(this.isFile){ //not dvd, music, or bluray...
        this.position=this.position+300;//5 minutes
        url="http://"+this.duneIp+"/cgi-bin/do?cmd=set_playback_state&position="+this.position;
    }
    else {
        url="http://"+this.duneIp+"/cgi-bin/do?cmd=ir_code&ir_code=E21DBF00";
    }
    request({
        url:url, 
        method:'get',
        json:true}, function(){        
        });
}
DUNEInterface.prototype.prev=function(){
    var url="";
    if(this.isFile){ //not dvd, music, or bluray...
        this.position=this.position-300;//5 minutes
        if(this.position<0){
            this.position=0;
        }
        url="http://"+this.duneIp+"/cgi-bin/do?cmd=set_playback_state&position="+this.position;
    }
    else {
        url="http://"+this.duneIp+"/cgi-bin/do?cmd=ir_code&ir_code=B649BF00";
    }
    request({
        url:url, 
        method:'get',
        json:true}, function(){        
        });
}
DUNEInterface.prototype.pause=function(){
    var url="";
    if(this.paused){
        url="http://"+this.duneIp+"/cgi-bin/do?cmd=set_playback_state&speed=256";
    }
    else {
        url="http://"+this.duneIp+"/cgi-bin/do?cmd=set_playback_state&speed=0";
    }
    this.paused=!this.paused;
    request({
        url:url, 
        method:'get',
        json:true}, function(){        
        });
}
DUNEInterface.prototype.postPollingResults=function(data, self){
    data=data.command_result.param;
    //var self=this;
    //console.log(self);
    //console.log(data);
    if(data.length>8){
        if(data[8]['$'].name==='playback_position' && data[5]['$'].name==='playback_url') {
            self.position=data[8]['$'].value;
            self.currentlyPlayingUrl=data[5]['$'].value;
            var typeUpdate="Progress";
            if(data[2]['$'].value==='stopped'){
                self.isStop=true;
                typeUpdate="Stopped";
            }
            //console.log("at line 220: "+data[2]['$'].value);
            self.sendUpdate(self.position*self.embyTime, typeUpdate, self.itemUrls[self.currentlyPlayingUrl]);
        }

    }
}
module.exports=DUNEInterface;